using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.InteropServices;
//using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Threading;
using System.Windows.Shapes;

namespace WidgetImage
{
    /// <summary>
    /// Logique d'interaction pour MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        private void loadMediaPlayer(object sender, System.Windows.RoutedEventArgs e)
        {
            HandleMediaElement newWindow = new HandleMediaElement();

<<<<<<< HEAD
        private void loadFile(object sender, RoutedEventArgs e)
        {
            String pathFile = "";
            Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
            dlg.FileName = "Document";
            // dlg.Filter = "Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png) | *.jpg; *.jpeg; *.jpe; *.jfif; *.png";
=======
            newWindow.Show();
            this.Close();
>>>>>>> 4656fc9b7522210a95c285b61eda7c134eaa05df
            
        }

        private void loadLibrary(object sender, System.Windows.RoutedEventArgs e)
        {
            Library newWindow = new Library();

            newWindow.Show();
            this.Close();

<<<<<<< HEAD
            // Initialize the MediaElement property values.
            //InitializePropertyValues();
        }

        private void soundChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Console.WriteLine((int)volumeSlider.Value);

            myMedia.Volume = ((double)volumeSlider.Value / 100);
        }

 
        private void moveVideo(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            int SliderValue = (int)timeline.Value;
            if (myMedia.NaturalDuration.HasTimeSpan)
            {
                TimeSpan interm = myMedia.NaturalDuration.TimeSpan;
                var totalTime = interm.TotalSeconds;
                Console.WriteLine(interm.TotalSeconds);
                var newTime = 0;
                if (SliderValue > 0)
                    newTime = ((int)totalTime * SliderValue) / 100;
                Console.WriteLine(newTime);
                TimeSpan ts = new TimeSpan(0, 0, 0, newTime, 0);
                myMedia.Position = ts;
                currentTime.Content = ts.ToString();
            }
        }

         private void speedRatioFunc(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            myMedia.SpeedRatio = (double)speedRatio.Value;
        }

        private void Element_MediaOpened(object sender, EventArgs e)
        {
            timeline.Maximum = myMedia.NaturalDuration.TimeSpan.TotalMilliseconds;
        }

        void InitializePropertyValues()
        {
            // Set the media's starting Volume and SpeedRatio to the current value of the
            // their respective slider controls.
            myMedia.Volume = (double)volumeSlider.Value;
            myMedia.SpeedRatio = (double)speedRatio.Value;
            if (myMedia.NaturalDuration.HasTimeSpan)
                totalTime.Content = myMedia.NaturalDuration.TimeSpan.ToString();
            }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            var newX = (myWindow.ActualHeight * 10) / 100;
            var newY = (myWindow.ActualHeight * 5) / 100;
            myMedia.Margin = new Thickness(newX, newY, 0, 0);
            myMedia.Height = (myWindow.ActualHeight * 80) / 100;
            myMedia.Width = (myWindow.ActualWidth * 90) / 100;
=======
>>>>>>> 4656fc9b7522210a95c285b61eda7c134eaa05df
        }
    }

}
